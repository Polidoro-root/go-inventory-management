// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package database

import (
	"context"
	"time"
)

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, name, role, email, phone_number, password, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, name, role, email, phone_number, password, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) FindUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveUser = `-- name: SaveUser :exec
INSERT INTO users (
    id,
    name,
    role,
    email,
    phone_number,
    password,
    created_at,
    updated_at
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type SaveUserParams struct {
	ID          string
	Name        string
	Role        string
	Email       string
	PhoneNumber string
	Password    string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) error {
	_, err := q.db.ExecContext(ctx, saveUser,
		arg.ID,
		arg.Name,
		arg.Role,
		arg.Email,
		arg.PhoneNumber,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const userEmailExist = `-- name: UserEmailExist :one
SELECT EXISTS (
  SELECT 1 FROM users
  WHERE email = $1
)
`

func (q *Queries) UserEmailExist(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userEmailExist, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const userPhoneNumberExist = `-- name: UserPhoneNumberExist :one
SELECT EXISTS (
  SELECT 1 FROM users
  WHERE phone_number = $1
)
`

func (q *Queries) UserPhoneNumberExist(ctx context.Context, phoneNumber string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userPhoneNumberExist, phoneNumber)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
